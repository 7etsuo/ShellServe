!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!D	M,module	/modules/
!_TAG_KIND_DESCRIPTION!D	T,template	/templates/
!_TAG_KIND_DESCRIPTION!D	V,version	/version statements/
!_TAG_KIND_DESCRIPTION!D	X,mixin	/mixins/
!_TAG_KIND_DESCRIPTION!D	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!D	c,class	/classes/
!_TAG_KIND_DESCRIPTION!D	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!D	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!D	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!D	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!D	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!D	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!D	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!D	u,union	/union names/
!_TAG_KIND_DESCRIPTION!D	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!D	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/storm/git/os_dev/fileserver/NETWORK_CODE/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(CLIENT_EXEC)	Makefile	/^$(CLIENT_EXEC): $(COMMON_OBJS) $(CLIENT_OBJS)$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(CLIENT_SRC_DIR)\/%.c$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(COMMON_SRC_DIR)\/%.c$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(SERVER_SRC_DIR)\/%.c$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o: $(TEST_SRC_DIR)\/%.c$/;"	t
$(SERVER_EXEC)	Makefile	/^$(SERVER_EXEC): $(COMMON_OBJS) $(SERVER_OBJS)$/;"	t
BACKLOG	networktcp.h	/^#define BACKLOG /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -O0 -g -MMD -MP -I\/usr\/local\/include -I. -I.\/client_code -I.\/server_code$/;"	m
CLIENT_DEPS	Makefile	/^CLIENT_DEPS = $(patsubst $(CLIENT_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.d,$(CLIENT_SRCS))$/;"	m
CLIENT_EXEC	Makefile	/^CLIENT_EXEC = client$/;"	m
CLIENT_OBJS	Makefile	/^CLIENT_OBJS = $(patsubst $(CLIENT_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.o,$(CLIENT_SRCS))$/;"	m
CLIENT_SRCS	Makefile	/^CLIENT_SRCS = $(wildcard $(CLIENT_SRC_DIR)\/*.c)$/;"	m
CLIENT_SRC_DIR	Makefile	/^CLIENT_SRC_DIR = client_code$/;"	m
COMMON_DEPS	Makefile	/^COMMON_DEPS = $(patsubst $(COMMON_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.d,$(COMMON_SRCS))$/;"	m
COMMON_OBJS	Makefile	/^COMMON_OBJS = $(patsubst $(COMMON_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.o,$(COMMON_SRCS))$/;"	m
COMMON_SRCS	Makefile	/^COMMON_SRCS = $(wildcard $(COMMON_SRC_DIR)\/*.c)$/;"	m
COMMON_SRC_DIR	Makefile	/^COMMON_SRC_DIR = .$/;"	m
CREDENTIAL_LEN	clientlogin.h	/^#define CREDENTIAL_LEN /;"	d
ClientContext	client_core.h	/^struct ClientContext {$/;"	s
ClientData	filetransfer.h	/^typedef struct _ClientData ClientData;$/;"	t	typeref:struct:_ClientData
ClientData	server_core.h	/^} ClientData;$/;"	t	typeref:struct:_ClientData
Credential	clientlogin.h	/^}Credential;$/;"	t	typeref:struct:__Credential
DEFAULT_IP	client_core.h	/^#define DEFAULT_IP /;"	d
DEFAULT_PORT	client_core.h	/^#define DEFAULT_PORT /;"	d
EOF	mystring.h	/^#define EOF /;"	d
EXIT	filetransfer.h	/^  EXIT,$/;"	e	enum:FTPCALLBACK
FDLEN	pipeline.h	/^  FDLEN$/;"	e	enum:pipefd
FTPCALLBACK	filetransfer.h	/^enum FTPCALLBACK {$/;"	g
GET	filetransfer.h	/^  GET,$/;"	e	enum:FTPCALLBACK
HELP	filetransfer.h	/^  HELP,$/;"	e	enum:FTPCALLBACK
MALLOC_FLAGS	syscalls.h	/^#define MALLOC_FLAGS /;"	d
MALLOC_PROT	syscalls.h	/^#define MALLOC_PROT /;"	d
MAP_ANONYMOUS	syscalls.h	/^#define MAP_ANONYMOUS /;"	d
MAXDATASIZE	globals.h	/^#define MAXDATASIZE /;"	d
MAX_DATA_SIZE	globals.h	/^#define MAX_DATA_SIZE /;"	d
MAX_LINE_SIZE	globals.h	/^#define MAX_LINE_SIZE /;"	d
MAX_LOGIN_ATTEMPTS	server_core.h	/^#define MAX_LOGIN_ATTEMPTS /;"	d
MAX_NUM_ARGS	globals.h	/^#define MAX_NUM_ARGS /;"	d
MAX_PATH_SIZE	globals.h	/^#define MAX_PATH_SIZE /;"	d
MAX_PROMPT_SIZE	globals.h	/^#define MAX_PROMPT_SIZE /;"	d
MAX_USER_NAME	globals.h	/^#define MAX_USER_NAME /;"	d
MyIO	filetransfer.h	/^struct MyIO {$/;"	s
NCALLBACK	filetransfer.h	/^  NCALLBACK,$/;"	e	enum:FTPCALLBACK
NETREADMAX	networktcp.h	/^#define NETREADMAX /;"	d
NONE	globals.h	/^  NONE,$/;"	e	enum:debug
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
PUT	filetransfer.h	/^  PUT,$/;"	e	enum:FTPCALLBACK
Pipeline	command_handler.h	/^typedef struct __Pipeline Pipeline;$/;"	t	typeref:struct:__Pipeline
Pipeline	pipeline.h	/^} Pipeline;$/;"	t	typeref:struct:__Pipeline
READ_END	pipeline.h	/^  READ_END,$/;"	e	enum:pipefd
READ_END	test/unit_tests.c	/^#define READ_END /;"	d	file:
Read	syscalls.c	/^Read(int fd, void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
SERVER_DEPS	Makefile	/^SERVER_DEPS = $(patsubst $(SERVER_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.d,$(SERVER_SRCS))$/;"	m
SERVER_EXEC	Makefile	/^SERVER_EXEC = server$/;"	m
SERVER_OBJS	Makefile	/^SERVER_OBJS = $(patsubst $(SERVER_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.o,$(SERVER_SRCS))$/;"	m
SERVER_SRCS	Makefile	/^SERVER_SRCS = $(wildcard $(SERVER_SRC_DIR)\/*.c)$/;"	m
SERVER_SRC_DIR	Makefile	/^SERVER_SRC_DIR = server_code$/;"	m
SIGNALDEBUG	globals.h	/^  SIGNALDEBUG$/;"	e	enum:debug
START_TEST	test/unit_tests.c	/^START_TEST(test_mymalloc_and_myfree_success)$/;"	f	typeref:typename:END_TEST
START_TEST	test/unit_tests.c	/^START_TEST(test_mysckread_large_buffer)$/;"	f	typeref:typename:END_TEST
START_TEST	test/unit_tests.c	/^START_TEST(test_mysckread_success)$/;"	f
START_TEST	test/unit_tests.c	/^START_TEST(test_mysckwrite_success)$/;"	f	typeref:typename:END_TEST
SYSCALLDEBUG	globals.h	/^  SYSCALLDEBUG,$/;"	e	enum:debug
ServerData	filetransfer.h	/^typedef struct _ServerData ServerData;$/;"	t	typeref:struct:_ServerData
ServerData	server_core.h	/^}ServerData;$/;"	t	typeref:struct:_ServerData
TEST_DEPS	Makefile	/^TEST_DEPS = $(patsubst $(TEST_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.d,$(TEST_SRCS))$/;"	m
TEST_EXEC	Makefile	/^TEST_EXEC = unit_tests$/;"	m
TEST_LIBS	Makefile	/^TEST_LIBS = -lcheck -lm -lrt -lpthread -lsubunit$/;"	m
TEST_OBJS	Makefile	/^TEST_OBJS = $(patsubst $(TEST_SRC_DIR)\/%.c,$(OBJ_DIR)\/%.o,$(TEST_SRCS))$/;"	m
TEST_SRCS	Makefile	/^TEST_SRCS = $(wildcard $(TEST_SRC_DIR)\/*.c)$/;"	m
TEST_SRC_DIR	Makefile	/^TEST_SRC_DIR = test$/;"	m
USER_MAX	clientlogin.h	/^#define USER_MAX /;"	d
WRITE_END	pipeline.h	/^  WRITE_END,$/;"	e	enum:pipefd
WRITE_END	test/unit_tests.c	/^#define WRITE_END /;"	d	file:
Write	syscalls.c	/^Write(int fd, const void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
_ClientData	server_core.h	/^typedef struct _ClientData {$/;"	s
_POSIX_C_SOURCE	syscalls.c	/^#define _POSIX_C_SOURCE /;"	d	file:
_ServerData	server_core.h	/^typedef struct _ServerData {$/;"	s
__CLIENT_CORE_H	client_core.h	/^#define __CLIENT_CORE_H$/;"	d
__CLIENT_LOGIN_H	clientlogin.h	/^#define __CLIENT_LOGIN_H$/;"	d
__COMMAND_HANDLER_H	command_handler.h	/^#define __COMMAND_HANDLER_H$/;"	d
__Credential	clientlogin.h	/^typedef struct __Credential{$/;"	s
__ENVIRON_NAME_MAX	mystring.c	/^#define __ENVIRON_NAME_MAX /;"	d	file:
__ENV_MAX	mystring.c	/^#define __ENV_MAX /;"	d	file:
__FILE_TRANSFER_H	filetransfer.h	/^#define __FILE_TRANSFER_H$/;"	d
__GLOBAL_H	globals.h	/^#define __GLOBAL_H$/;"	d
__IO_GETCHAR_BUFSIZE	mystring.c	/^#define __IO_GETCHAR_BUFSIZE /;"	d	file:
__MAXREAD	clientlogin.c	/^#define __MAXREAD /;"	d	file:
__MAX_CMD_LEN	mystring.c	/^#define __MAX_CMD_LEN /;"	d	file:
__MYSTRING_H	mystring.h	/^#define __MYSTRING_H$/;"	d
__NETWORKTCP_H	networktcp.h	/^#define __NETWORKTCP_H$/;"	d
__PIPELINE_H	pipeline.h	/^#define __PIPELINE_H$/;"	d
__Pipeline	pipeline.h	/^typedef struct __Pipeline {$/;"	s
__SERVER_CORE_H	server_core.h	/^#define __SERVER_CORE_H$/;"	d
__SIGNALS_H	signals.h	/^#define __SIGNALS_H$/;"	d
__SYSCALLS_H	syscalls.h	/^#define __SYSCALLS_H$/;"	d
__SZ_PUTL	mystring.c	/^#define __SZ_PUTL /;"	d	file:
__credentials	clientlogin.c	/^Credential __credentials[USER_MAX];$/;"	v	typeref:typename:Credential[]
__ncredentials	clientlogin.c	/^int __ncredentials;$/;"	v	typeref:typename:int
__need_NULL	globals.h	/^#define	__need_NULL$/;"	d
__need_size_t	globals.h	/^#define __need_size_t$/;"	d
__need_size_t	pipeline.h	/^#define __need_size_t$/;"	d
acceptandforkclient	server_core.c	/^acceptandforkclient(ClientData * const client, const ServerData * const server)$/;"	f	typeref:typename:pid_t
all	Makefile	/^all: setup $(CLIENT_EXEC) $(SERVER_EXEC) test$/;"	t
apprunner	client_code/client.c	/^apprunner(int argc, char *argv[])$/;"	f	typeref:typename:void
apprunner	server_code/server.c	/^apprunner(void)$/;"	f	typeref:typename:void
argc	pipeline.h	/^  int argc;$/;"	m	struct:__Pipeline	typeref:typename:int
argv	pipeline.h	/^  char *argv[MAX_NUM_ARGS];$/;"	m	struct:__Pipeline	typeref:typename:char * []
argv_alloc	command_handler.c	/^char argv_alloc[MAX_NUM_ARGS][MAX_LINE_SIZE];$/;"	v	typeref:typename:char[][]
attempt_login	server_core.c	/^attempt_login(ClientData * const client, ServerData * const server)$/;"	f	typeref:typename:int
bindfd	server_core.h	/^  int bindfd;$/;"	m	struct:_ServerData	typeref:typename:int
bindscklisten	networktcp.c	/^bindscklisten(struct addrinfo *ai)$/;"	f	typeref:typename:int
buf	filetransfer.h	/^  char buf[MAX_DATA_SIZE];$/;"	m	struct:MyIO	typeref:typename:char[]
bufsize	filetransfer.h	/^  size_t bufsize;$/;"	m	struct:MyIO	typeref:typename:size_t
build_pipeline	pipeline.c	/^build_pipeline(Pipeline *pipe, ClientData * const client, char * const readbuf)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
client_interaction_suite	test/unit_tests.c	/^client_interaction_suite(void)$/;"	f	typeref:typename:Suite *
clientfd	server_core.h	/^  int clientfd, clientid, userindex;$/;"	m	struct:_ClientData	typeref:typename:int
clienthandleexit	filetransfer.c	/^clienthandleexit(struct MyIO *io)$/;"	f	typeref:typename:void
clienthandleget	filetransfer.c	/^clienthandleget(struct MyIO *io)$/;"	f	typeref:typename:void
clienthandlehelp	filetransfer.c	/^clienthandlehelp(struct MyIO *io)$/;"	f	typeref:typename:void
clienthandleput	filetransfer.c	/^clienthandleput(struct MyIO *io)$/;"	f	typeref:typename:void
clientid	server_core.h	/^  int clientfd, clientid, userindex;$/;"	m	struct:_ClientData	typeref:typename:int
close_pipes	pipeline.c	/^close_pipes(Pipeline *pipe, size_t npipes)$/;"	f	typeref:typename:void
closeclientfd	server_core.c	/^void closeclientfd(ClientData * const client, const ServerData * const server)$/;"	f	typeref:typename:void
closereadfd_restoreoldfd	filetransfer.c	/^closereadfd_restoreoldfd(int oldfd, struct MyIO *io)$/;"	f	typeref:typename:void
closewritefd_restoreoldfd	filetransfer.c	/^closewritefd_restoreoldfd(int oldfd, struct MyIO *io)$/;"	f	typeref:typename:void
commandlist	filetransfer.c	/^const char *const commandlist = "put\\nget\\ndel\\nhelp\\n";$/;"	v	typeref:typename:const char * const
commandlist	server_core.h	/^  const char *commandlist;$/;"	m	struct:_ServerData	typeref:typename:const char *
create_savefile_getfd	filetransfer.c	/^create_savefile_getfd(char *savename, struct MyIO *io)$/;"	f	typeref:typename:int
debug	globals.h	/^enum debug {$/;"	g
do_connect_server	client_core.c	/^do_connect_server(const char * const ip, const char * const port)$/;"	f	typeref:typename:int
do_dup2_command	command_handler.c	/^do_dup2_command(Pipeline *pipe, size_t npipes, int i)$/;"	f	typeref:typename:void
do_login	server_core.c	/^do_login(ClientData * const client, ServerData * const server)$/;"	f	typeref:typename:void
do_poll	client_core.c	/^do_poll(int sockfd)$/;"	f	typeref:typename:void
dup2_and_close	command_handler.c	/^dup2_and_close(Pipeline *pipe, size_t npipes, int i)$/;"	f	typeref:typename:void
dup2_last_command	command_handler.c	/^dup2_last_command(Pipeline *pipe, int i)$/;"	f	typeref:typename:void
dup2_not_first_command	command_handler.c	/^dup2_not_first_command(Pipeline *pipe, int i)$/;"	f	typeref:typename:void
dup2_not_last_command	command_handler.c	/^dup2_not_last_command(Pipeline *pipe, int i)$/;"	f	typeref:typename:void
exitfreeaddr	networktcp.c	/^exitfreeaddr(const char * const err, struct addrinfo *ai)$/;"	f	typeref:typename:void
fd	pipeline.h	/^  int fd[FDLEN];$/;"	m	struct:__Pipeline	typeref:typename:int[]
fdgetline	mystring.c	/^fdgetline(int fd)$/;"	f	typeref:typename:char *
fdputs	mystring.c	/^fdputs(int fd, const char *const s)$/;"	f	typeref:typename:ssize_t
fin	pipeline.h	/^  char *fin;$/;"	m	struct:__Pipeline	typeref:typename:char *
fout	pipeline.h	/^  char *fout;$/;"	m	struct:__Pipeline	typeref:typename:char *
ftpcallback	filetransfer.h	/^typedef void(*ftpcallback[NCALLBACK])(struct MyIO*);$/;"	t	typeref:typename:void (* [NCALLBACK])(struct MyIO *)
g_envp	globals.c	/^char **g_envp = NULL;$/;"	v	typeref:typename:char **
get_username_at_index	clientlogin.c	/^get_username_at_index(int i)$/;"	f	typeref:typename:char *
getfile_fromserver	filetransfer.c	/^getfile_fromserver(char *savename, struct MyIO *io, size_t maxread)$/;"	f	typeref:typename:void
greeting	server_core.c	/^const char *const greeting = "Welcome to MyFTP Server!\\n";$/;"	v	typeref:typename:const char * const
greeting	server_core.h	/^  const char *greeting;$/;"	m	struct:_ServerData	typeref:typename:const char *
handleclient	server_core.c	/^handleclient(ClientData * const client, ServerData * const server)$/;"	f	typeref:typename:void
init_clienthandleget	filetransfer.c	/^init_clienthandleget(char *savename, struct MyIO *io, size_t savenamelen)$/;"	f	typeref:typename:void
init_pipeline	pipeline.c	/^init_pipeline(Pipeline *pipe, int fd)$/;"	f	typeref:typename:void
init_pipelines	pipeline.c	/^init_pipelines(Pipeline pipes[MAX_NUM_ARGS], int fd)$/;"	f	typeref:typename:void
init_pipesfd	pipeline.c	/^init_pipesfd(Pipeline *pipe, size_t npipes)$/;"	f	typeref:typename:void
initclient	client_core.c	/^initclient(int argc, char *argv[], struct MyIO *io)$/;"	f	typeref:typename:void
initiostruct	filetransfer.c	/^initiostruct(int sockfd, int readfd, int writefd, struct MyIO *io)$/;"	f	typeref:typename:void
initserver	server_core.c	/^initserver(ServerData * const server)$/;"	f	typeref:typename:void
initservergetsock	networktcp.c	/^initservergetsock(const char *const port)$/;"	f	typeref:typename:int
install_handlers	signals.c	/^install_handlers(void)$/;"	f	typeref:typename:void
io	server_core.h	/^  struct MyIO *io; \/* TODO: clean this up *\/$/;"	m	struct:_ServerData	typeref:struct:MyIO *
load_credentials	clientlogin.c	/^load_credentials(const char * const filename)$/;"	f	typeref:typename:void
load_user_and_password	clientlogin.c	/^load_user_and_password(char *line, int index)$/;"	f	typeref:typename:void
main	client_code/client.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	mystring.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	server_code/server.c	/^main(int argc, char **argv, char **envp)$/;"	f	typeref:typename:int
main	signals.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	test/unit_tests.c	/^main(void)$/;"	f	typeref:typename:int
myaccept	networktcp.c	/^myaccept(int bindfd)$/;"	f	typeref:typename:int
myaccess	syscalls.c	/^myaccess(const char * const pathname, int mode)$/;"	f	typeref:typename:int
mybind	networktcp.c	/^mybind(int sck, struct addrinfo *ai)$/;"	f	typeref:typename:int
myclose	syscalls.c	/^myclose(int fd)$/;"	f	typeref:typename:void
mydup2	syscalls.c	/^mydup2(int oldfd, int newfd)$/;"	f	typeref:typename:int
myexecve	syscalls.c	/^myexecve(const char *pathname, char *const argv[], char *const envp[])$/;"	f	typeref:typename:void
myfork	syscalls.c	/^myfork(void)$/;"	f	typeref:typename:pid_t
myfprintf	mystring.c	/^myfprintf(int fd, const char *strn, ...)$/;"	f	typeref:typename:void
myfree	syscalls.c	/^myfree(void *addr, size_t size)$/;"	f	typeref:typename:void
mygetaddrinfo	networktcp.c	/^mygetaddrinfo(const char *const port, const char *const ip, struct addrinfo **ai)$/;"	f	typeref:typename:void
mygetchar	mystring.c	/^mygetchar(int fd)$/;"	f	typeref:typename:int
mygetcwd	mystring.c	/^mygetcwd(char *buf, size_t size)$/;"	f	typeref:typename:char *
mygetenv	mystring.c	/^mygetenv(const char *name)$/;"	f	typeref:typename:char *
myitoa	mystring.c	/^*myitoa(int num, char *str)$/;"	f	typeref:typename:char *
mylisten	networktcp.c	/^mylisten(int sck, int backlog)$/;"	f	typeref:typename:int
mymalloc	syscalls.c	/^mymalloc(size_t size)$/;"	f	typeref:typename:void *
mymemcpy	mystring.c	/^mymemcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
mymemset	mystring.c	/^mymemset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
myopen	syscalls.c	/^myopen(const char *pathname, int flags, mode_t mode)$/;"	f	typeref:typename:int
myopenfile	syscalls.c	/^myopenfile(const char *pathname, int mode)$/;"	f	typeref:typename:int
mypipe	syscalls.c	/^mypipe(int *pipefd)$/;"	f	typeref:typename:void
myputs	mystring.c	/^myputs(const char *const s)$/;"	f	typeref:typename:ssize_t
myread	syscalls.c	/^myread(int fd, void *buf, size_t nbytes)$/;"	f	typeref:typename:ssize_t
myreadline	mystring.c	/^myreadline(int fd, char * const line, size_t read_max)$/;"	f	typeref:typename:size_t
mysckread	syscalls.c	/^mysckread(int sck, void *buf, size_t count)$/;"	f	typeref:typename:size_t
mysckread_noblock	syscalls.c	/^mysckread_noblock(int sck, void *buf, size_t count)$/;"	f	typeref:typename:size_t
mysckwrite	syscalls.c	/^mysckwrite(int sck, const void *buf, size_t count)$/;"	f	typeref:typename:size_t
mysetpgid	syscalls.c	/^mysetpgid(pid_t pid, pid_t pgid)$/;"	f	typeref:typename:void
mysigaction	syscalls.c	/^mysigaction(int signum, void (*handler)(int))$/;"	f	typeref:typename:void
mysigaddset	syscalls.c	/^mysigaddset(sigset_t *set, int signum)$/;"	f	typeref:typename:void
mysigdelset	syscalls.c	/^mysigdelset(sigset_t *set, int signum)$/;"	f	typeref:typename:void
mysigemptyset	syscalls.c	/^mysigemptyset(sigset_t *set)$/;"	f	typeref:typename:void
mysigfillset	syscalls.c	/^mysigfillset(sigset_t *set)$/;"	f	typeref:typename:void
mysigismember	syscalls.c	/^mysigismember(const sigset_t *set, int signum)$/;"	f	typeref:typename:int
mysignal	syscalls.c	/^mysignal(int signum, void (*handler)(int, siginfo_t *, void *))$/;"	f	typeref:typename:void
mysigprocmask	syscalls.c	/^mysigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f	typeref:typename:void
mysigsuspend	syscalls.c	/^mysigsuspend(const sigset_t *mask)$/;"	f	typeref:typename:int
mysocket	networktcp.c	/^mysocket(struct addrinfo *ai)$/;"	f	typeref:typename:int
mystpcpy	mystring.c	/^mystpcpy(char *dest, const char *src)$/;"	f	typeref:typename:char *
mystrcat	mystring.c	/^mystrcat(char *dest, const char *src)$/;"	f	typeref:typename:char *
mystrchr	mystring.c	/^mystrchr(const char *s, int c)$/;"	f	typeref:typename:const char *
mystrcmp	mystring.c	/^mystrcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:int
mystrcpy	mystring.c	/^mystrcpy(char *dest, const char *src)$/;"	f	typeref:typename:char *
mystrlen	mystring.c	/^mystrlen(const char *s)$/;"	f	typeref:typename:size_t
mystrncmp	mystring.c	/^mystrncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
mystrncpy	mystring.c	/^mystrncpy(char *dst, const char * const src, size_t n)$/;"	f	typeref:typename:char *
mystrrchr	mystring.c	/^mystrrchr(const char *s, int c)$/;"	f	typeref:typename:const char *
mystrsep	mystring.c	/^mystrsep(char **stringp, const char *delim)$/;"	f	typeref:typename:char *
mystrtok	mystring.c	/^mystrtok(char *str, char delim)$/;"	f	typeref:typename:char *
mywait	syscalls.c	/^mywait(int *wstatus)$/;"	f	typeref:typename:pid_t
mywaitpid	syscalls.c	/^mywaitpid(pid_t pid, int *wstatus, int options)$/;"	f	typeref:typename:pid_t
mywrite	syscalls.c	/^mywrite(int fd, const void *buf, size_t count)$/;"	f	typeref:typename:ssize_t
openfile_getfd_fromclient	filetransfer.c	/^openfile_getfd_fromclient(struct MyIO *io, int flags, int mode)$/;"	f	typeref:typename:int
outfd	server_core.h	/^  int outfd;$/;"	m	struct:_ServerData	typeref:typename:int
parse_commandline	command_handler.c	/^parse_commandline(char *argv[], char *command_line)$/;"	f	typeref:typename:int
parse_pipeline	pipeline.c	/^parse_pipeline(Pipeline *pipe, int argc, char *argv[])$/;"	f	typeref:typename:int
password	clientlogin.h	/^  char password[CREDENTIAL_LEN];$/;"	m	struct:__Credential	typeref:typename:char[]
pipefd	pipeline.h	/^enum pipefd {$/;"	g
port	server_core.c	/^const char *const port = "1234";$/;"	v	typeref:typename:const char * const
port	server_core.h	/^  const char *port;$/;"	m	struct:_ServerData	typeref:typename:const char *
printerr_exit	syscalls.h	/^#define printerr_exit(/;"	d
prompt	server_core.c	/^const char *const prompt = "server> ";$/;"	v	typeref:typename:const char * const
read_prompt_clienthandle	filetransfer.c	/^read_prompt_clienthandle(struct MyIO *io)$/;"	f	typeref:typename:void
readbuf	client_core.h	/^  char readbuf[MAX_DATA_SIZE + 1];$/;"	m	struct:ClientContext	typeref:typename:char[]
readbuf	server_core.h	/^  char readbuf[NETREADMAX+1];$/;"	m	struct:_ServerData	typeref:typename:char[]
readbytes_fromsocket	filetransfer.c	/^readbytes_fromsocket(struct MyIO *io, size_t szmax)$/;"	f	typeref:typename:void
readfd	filetransfer.h	/^  int sockfd, readfd, writefd;$/;"	m	struct:MyIO	typeref:typename:int
readfd_writesocket	networktcp.c	/^readfd_writesocket(int sockfd, char * buf, size_t sizebuf, int readfd, int eofflag)$/;"	f	typeref:typename:size_t
readsocket_writefd	networktcp.c	/^readsocket_writefd(int sockfd, void *buf, size_t sizebuf, int writefd)$/;"	f	typeref:typename:size_t
remove_whitespace	mystring.c	/^remove_whitespace(char *line)$/;"	f	typeref:typename:char *
run_pipeline	pipeline.c	/^run_pipeline(Pipeline *pipe, size_t npipes)$/;"	f	typeref:typename:void
runclient	client_core.c	/^runclient(struct MyIO *io)$/;"	f	typeref:typename:void
runcommand	command_handler.c	/^runcommand(ClientData * const client, char *readbuf)$/;"	f	typeref:typename:void
runfiletransfer	filetransfer.c	/^runfiletransfer(struct MyIO *io, void(*ftpcallback[NCALLBACK])(struct MyIO*))$/;"	f	typeref:typename:int
runflag	server_core.h	/^  int runflag;$/;"	m	struct:_ServerData	typeref:typename:int
runserver	server_core.c	/^runserver(ServerData * const server)$/;"	f	typeref:typename:void
sckconnect	networktcp.c	/^sckconnect(struct addrinfo *ai)$/;"	f	typeref:typename:int
send_filename_toserver	filetransfer.c	/^send_filename_toserver(struct MyIO *io, int sizename)$/;"	f	typeref:typename:void
send_greeting	server_core.c	/^send_greeting(ClientData * const client, ServerData * const server)$/;"	f	typeref:typename:void
send_login_result	server_core.c	/^send_login_result(ClientData * const client, int userindex)$/;"	f	typeref:typename:void
send_recv_log	server_core.c	/^send_recv_log(const char * const send_data,$/;"	f	typeref:typename:char * const
send_recv_log_io	server_core.c	/^send_recv_log_io(const char * const send_data,$/;"	f	typeref:typename:char * const
sendfile_toserver	filetransfer.c	/^sendfile_toserver(struct MyIO *io, size_t maxread)$/;"	f	typeref:typename:void
sendfile_tosocket	filetransfer.c	/^sendfile_tosocket(struct MyIO *io)$/;"	f	typeref:typename:void
serverhandleexit	filetransfer.c	/^serverhandleexit(struct MyIO *io)$/;"	f	typeref:typename:void
serverhandleget	filetransfer.c	/^serverhandleget(struct MyIO *io)$/;"	f	typeref:typename:void
serverhandlehelp	filetransfer.c	/^serverhandlehelp(struct MyIO *io)$/;"	f	typeref:typename:void
serverhandleput	filetransfer.c	/^serverhandleput(struct MyIO *io)$/;"	f	typeref:typename:void
setup	Makefile	/^setup:$/;"	t
sigchld_handler	signals.c	/^sigchld_handler(int sig)$/;"	f	typeref:typename:void
sigint_handler	signals.c	/^sigint_handler(int sig)$/;"	f	typeref:typename:void
sizebuffers	client_core.h	/^  int sizebuffers;$/;"	m	struct:ClientContext	typeref:typename:int
sockfd	client_core.h	/^  int sockfd;$/;"	m	struct:ClientContext	typeref:typename:int
sockfd	filetransfer.h	/^  int sockfd, readfd, writefd;$/;"	m	struct:MyIO	typeref:typename:int
sockfd	pipeline.h	/^  int sockfd;$/;"	m	struct:__Pipeline	typeref:typename:int
strchrtest	mystring.c	/^strchrtest(void)$/;"	f	typeref:typename:void
strcmptest	mystring.c	/^strcmptest(void)$/;"	f	typeref:typename:void
strncmptest	mystring.c	/^strncmptest(void)$/;"	f	typeref:typename:void
strrchrtest	mystring.c	/^strrchrtest(void)$/;"	f	typeref:typename:void
sys_stderr	syscalls.h	/^#define sys_stderr /;"	d
sys_stdin	syscalls.h	/^#define sys_stdin /;"	d
sys_stdout	syscalls.h	/^#define sys_stdout /;"	d
syserrorexit	syscalls.c	/^syserrorexit(const char * const err, int sck, int errnum)$/;"	f	typeref:typename:void
system_suite	test/unit_tests.c	/^system_suite(void)$/;"	f	typeref:typename:END_TEST Suite *
test	Makefile	/^test: setup $(COMMON_OBJS) $(TEST_OBJS)$/;"	t
userindex	server_core.h	/^  int clientfd, clientid, userindex;$/;"	m	struct:_ClientData	typeref:typename:int
username	clientlogin.h	/^  char username[CREDENTIAL_LEN];$/;"	m	struct:__Credential	typeref:typename:char[]
verifyuser	clientlogin.c	/^verifyuser(const char * const username, const char * const password)$/;"	f	typeref:typename:int
writebuf	client_core.h	/^  char writebuf[MAX_DATA_SIZE + 1];$/;"	m	struct:ClientContext	typeref:typename:char[]
writechars	mystring.c	/^writechars(int fd, void *buf, size_t n)$/;"	f	typeref:typename:void
writefd	filetransfer.h	/^  int sockfd, readfd, writefd;$/;"	m	struct:MyIO	typeref:typename:int
